version: '3'
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - 15672:15672
    networks:
      - backend

  mongodb:
    container_name: mongodb 
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - backend

  server-a:
    container_name: server-a
    restart: always
    build:
      dockerfile: Dockerfile
      context:  ./backend/server-a
    ports:
      - "5001:5001"
    depends_on: 
      - rabbitmq
      - mongodb
    networks:
      - backend
      - frontend
    environment:
      WAIT_HOSTS: mongodb:27017, rabbitmq:5672
      WAIT_AFTER_HOSTS : 5
    command: sh -c "/wait && node app.js"

  server-b:
    container_name: server-b
    restart: always
    build:
      dockerfile: Dockerfile
      context:  ./backend/server-b
    depends_on: 
      - server-a
    networks:
      - backend
    environment:
      WAIT_HOSTS: server-a:5001
      WAIT_AFTER_HOSTS : 1
    command: sh -c "/wait && node app.js"

  frontend:
    container_name: frontend
    restart: always
    build:
      dockerfile: Dockerfile
      context:  ./frontend  
    ports:
      - "80:80"      
    depends_on: 
      - server-a
      - server-b
    networks:
      - frontend
    environment:
      WAIT_HOSTS: server-a:5001
      WAIT_AFTER_HOSTS : 1
    stdin_open: true
    command: sh -c "/wait && NODE_ENV=production && nginx -g 'daemon off;'"    

networks:
  backend:
    driver: bridge
  frontend:
      driver: bridge